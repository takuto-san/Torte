/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Test API Project
 * Test API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customFetch } from "@/lib/customFetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAuthControllerGetHelloUrl = () => {
  return `/auth/hello`;
};

export const authControllerGetHello = async (
  options?: RequestInit,
): Promise<null> => {
  return customFetch<null>(getAuthControllerGetHelloUrl(), {
    ...options,
    method: "GET",
  });
};

export const getAuthControllerGetHelloQueryKey = () => {
  return [`/auth/hello`] as const;
};

export const getAuthControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetHello>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGetHello>>
  > = ({ signal }) => authControllerGetHello({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AuthControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetHello>>
>;
export type AuthControllerGetHelloQueryError = unknown;

export function useAuthControllerGetHello<
  TData = Awaited<ReturnType<typeof authControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetHello>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAuthControllerLoginUrl = () => {
  return `/auth/login`;
};

export const authControllerLogin = async (
  options?: RequestInit,
): Promise<null> => {
  return customFetch<null>(getAuthControllerLoginUrl(), {
    ...options,
    method: "POST",
  });
};

export const getAuthControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    void
  > = () => {
    return authControllerLogin(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;

export type AuthControllerLoginMutationError = unknown;

export const useAuthControllerLogin = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
