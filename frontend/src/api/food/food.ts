/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Test API Project
 * Test API description
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { FoodControllerSearchFoodsParams } from ".././schemas";

import { customFetch } from "../../lib/mocks/customFetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getFoodControllerSearchFoodsUrl = (
  params: FoodControllerSearchFoodsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/food/search?${stringifiedParams}`
    : `/food/search`;
};

export const foodControllerSearchFoods = async (
  params: FoodControllerSearchFoodsParams,
  options?: RequestInit,
): Promise<null> => {
  return customFetch<null>(getFoodControllerSearchFoodsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getFoodControllerSearchFoodsQueryKey = (
  params?: FoodControllerSearchFoodsParams,
) => {
  return [`/food/search`, ...(params ? [params] : [])] as const;
};

export const getFoodControllerSearchFoodsQueryOptions = <
  TData = Awaited<ReturnType<typeof foodControllerSearchFoods>>,
  TError = unknown,
>(
  params: FoodControllerSearchFoodsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof foodControllerSearchFoods>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFoodControllerSearchFoodsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof foodControllerSearchFoods>>
  > = ({ signal }) =>
    foodControllerSearchFoods(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof foodControllerSearchFoods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FoodControllerSearchFoodsQueryResult = NonNullable<
  Awaited<ReturnType<typeof foodControllerSearchFoods>>
>;
export type FoodControllerSearchFoodsQueryError = unknown;

export function useFoodControllerSearchFoods<
  TData = Awaited<ReturnType<typeof foodControllerSearchFoods>>,
  TError = unknown,
>(
  params: FoodControllerSearchFoodsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof foodControllerSearchFoods>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof foodControllerSearchFoods>>,
          TError,
          Awaited<ReturnType<typeof foodControllerSearchFoods>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFoodControllerSearchFoods<
  TData = Awaited<ReturnType<typeof foodControllerSearchFoods>>,
  TError = unknown,
>(
  params: FoodControllerSearchFoodsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof foodControllerSearchFoods>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof foodControllerSearchFoods>>,
          TError,
          Awaited<ReturnType<typeof foodControllerSearchFoods>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFoodControllerSearchFoods<
  TData = Awaited<ReturnType<typeof foodControllerSearchFoods>>,
  TError = unknown,
>(
  params: FoodControllerSearchFoodsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof foodControllerSearchFoods>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFoodControllerSearchFoods<
  TData = Awaited<ReturnType<typeof foodControllerSearchFoods>>,
  TError = unknown,
>(
  params: FoodControllerSearchFoodsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof foodControllerSearchFoods>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFoodControllerSearchFoodsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
